resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: appscodeci/github-pr-resource
    tag: latest

resources:
- name: do
  type: pull-request
  source:
    owner: kubedb
    repo: operator
    label: ok-to-test/do
    access_token: ((access_token))

- name: creds
  type: s3
  source:
    bucket: kubedbci
    access_key_id: ((s3-access-key))
    secret_access_key: ((s3-secret))
    versioned_file: creds.zip

jobs:
- name: test-operator-do
  plan:
  - aggregate:
    - get: do
      trigger: true
      version: every
    - get: creds
      params: {unpack: true}
  - put: do
    params: { path: do, status: pending}
  - do:
    - aggregate:
      - task: create_cluster
        file: do/hack/concourse/create_cluster.yml
        input_mapping: {operator: do}
        params: {ClusterProvider: digitalocean}
      - task: build_and_push_operator
        file: do/hack/concourse/build_and_push.yml
        privileged: true
        input_mapping: {operator: do}
        params:
          ClusterProvider: digitalocean
          DOCKER_USER: ((docker_user))
          DOCKER_PASS: ((docker_pass))
    - task: deploy_operator
      file: do/hack/concourse/deploy.yml
      input_mapping: {operator: do}
      params: {ClusterProvider: digitalocean}
    - aggregate:
      - task: mysql
        file: do/hack/concourse/test.yml
        input_mapping: {operator: do}
      - task: mongodb
        file: do/hack/concourse/test.yml
        input_mapping: {operator: do}
      - task: redis
        file: do/hack/concourse/test.yml
        input_mapping: {operator: do}
      - task: memcached
        file: do/hack/concourse/test.yml
        input_mapping: {operator: do}
      - task: elasticsearch
        file: do/hack/concourse/test.yml
        input_mapping: {operator: do}
      - task: postgres
        file: do/hack/concourse/test.yml
        input_mapping: {operator: do}
    ensure:
      task: cleanup
      file: do/hack/concourse/cleanup.yml
      input_mapping: {operator: do}
      params: {ClusterProvider: digitalocean}
    on_success:
      put: do
      params: { path: do, status: success}
    on_failure:
      put: do
      params: { path: do, status: failure}
